////  Board.m//  NumbersToOne////  Created by Micah Holden on 12/22/09.//  Copyright 2009 __MyCompanyName__. All rights reserved.//#import "Board.h"@implementation Board-(Board*)initWithdimension:(int)dimension{	self = [super init];	if(self)	{		dim = dimension;		level = dimension;		doList = [[NSMutableArray alloc]init];		count = 0;		moves = 0;		[self resetBoard];	}	return self;}-(void)resetBoard{	int i,j;	for(i=0; i<dim; i++)	{		for(j=0; j<dim;j++)		{			board[i][j] = 1;			//colors[i][j] = j+1;		}	}	board[dim-1][dim-1] = 0;	zrow = dim-1;	zcol = dim-1;}-(void)setLevel:(int)lev{	int x = 0;	switch(dim)	{		case 4:			if(lev < 26) level = lev;			else			{				x = arc4random() % dim;				level = 25 + x;			}			break;		case 5:			if(lev < 31) level = lev;			else			{				x = arc4random() % dim;				level = 30 + x;			}			break;		case 6:			if(lev < 36) level = lev;			else			{				x = arc4random() % dim;				level = 35 + x;			}			break;		case 7:			if(lev < 51) level = lev;			else			{				x = arc4random() % dim;				level = 50 + x;			}			break;		case 8:			if(lev < 76) level = lev;			else			{				x = arc4random() % dim;				level = 75 + x;			}			break;	}}-(int)getLevel{	return level;}-(void)setDimension:(int)d{	dim = d;	[self resetBoard];}-(int)getDimension{	return dim;}-(void)getLocation{	int i,j;	for(i=0;i<dim;i++)	{		for(j=0; j<dim;j++)		{			if(board[i][j] == 0)			{				zrow = i;				zcol = j;			}		}	}}-(int)getValAtRow:(int)r Col:(int)c{	return board[r][c];}-(int)getColor:(int)r Col:(int)c{	return colors[r][c];}-(int)getMoves{	return moves;}-(void)shuffle:(NSArray*)buttons zeroLoc:(NSRect)zero{	int i=0,r,c;	moves = 0;	count = 0;	[self resetBoard];	zrow = dim-1;	zcol = dim-1;	if([doList count] > 0) [doList removeAllObjects];	while (i < level)	{		r = arc4random() % dim;		c = arc4random() % dim;		if(zrow == r)		{			for(int i=0; i<buttons.count; i++)			{				if([[buttons objectAtIndex:i]isInRow:r Col:c])				{					if([self checkMoveRow:[buttons objectAtIndex:i] zeroLoc:zero])					{						i++;						break;					}				}			}		}		else if(zcol == c)		{			for(int i=0; i<buttons.count; i++)			{				if([[buttons objectAtIndex:i]isInRow:r Col:c])				{					if([self checkMoveCol:[buttons objectAtIndex:i] zeroLoc:zero])					{						i++;						break;					}				}			}		}		else if(zrow == c)		{			for(int i=0; i<buttons.count; i++)			{				if([[buttons objectAtIndex:i]isInRow:r Col:c])				{					if([self checkMoveRow:[buttons objectAtIndex:i] zeroLoc:zero])					{						i++;						break;					}				}				break;			}		}		else if(zcol == r)		{			for(int i=0; i<buttons.count; i++)			{				if([[buttons objectAtIndex:i]isInRow:r Col:c])				{					if([self checkMoveCol:[buttons objectAtIndex:i] zeroLoc:zero])					{						i++;						break;					}				}			}		}		count++;		if(count > 500) break;	}	if(count > 500)	{		[self shuffle:buttons zeroLoc:zero];		[self resetButtons:buttons];	}	}-(BOOL)moveRow:(MyButton*)sender zeroLoc:(NSRect)zero{	int x,i;	if(fabs(sender.col - zcol) < 2) return FALSE;	x = board[sender.row][sender.col];	if(zcol > sender.col)	{		for(i=sender.col+1; i<zcol; i++)			x-=board[sender.row][i];	}	else 	{		for(i=sender.col-1; i>zcol; i--)			x-=board[sender.row][i];	}	if(x<1) return FALSE;	board[zrow][zcol] = x;	sender.currentValue = x;	[[sender animator] setFrame:zero];	zero = [sender frame];	board[sender.row][sender.col] = 0;	//colors[zrow][zcol] = colors[r][c];	[doList addObject:[NSNumber numberWithInt:zrow]];	[doList addObject:[NSNumber numberWithInt:zcol]];	[doList addObject:[NSNumber numberWithInt:sender.row]];	[doList addObject:[NSNumber numberWithInt:sender.col]];	zrow = sender.row;	zcol = sender.col;	return TRUE;}-(BOOL)moveCol:(MyButton*)sender zeroLoc:(NSRect)zero{	int x,i;	if(fabs(sender.row - zrow) < 2) return FALSE;	x = board[sender.row][sender.col];	if(zrow>sender.row)	{		for(i=sender.row+1; i<zrow; i++)			x-=board[i][sender.col];	}	else 	{		for(i=sender.row-1; i>zrow; i--)			x-=board[i][sender.col];	}	if(x<1)return FALSE;	board[zrow][zcol] = x;	sender.currentValue = x;	[[sender animator] setFrame:zero];	zero = [sender frame];	board[sender.row][sender.col] = 0;	//colors[zrow][zcol] = colors[r][c];	[doList addObject:[NSNumber numberWithInt:zrow]];	[doList addObject:[NSNumber numberWithInt:zcol]];	[doList addObject:[NSNumber numberWithInt:sender.row]];	[doList addObject:[NSNumber numberWithInt:sender.col]];	zrow = sender.row;	zcol = sender.col;	return TRUE;}-(BOOL)checkMoveRow:(MyButton*)sender zeroLoc:(NSRect)zero{	int x=0,i;	if(fabs(sender.col-zcol) < 2)return FALSE;	if(zcol > sender.col)	{		for(i=sender.col; i<zcol; i++)		{			x+=board[sender.row][i];		}	}	else 	{		for(i=sender.col; i>zcol; i--)		{			x+=board[sender.row][i];		}	}	if(x>6) return FALSE;	board[zrow][zcol] = x;	sender.currentValue = x;	[[sender animator] setFrame:zero];	zero = [sender frame];	board[sender.row][sender.col] = 0;	//colors[zrow][zcol] = colors[r][c];	zrow = sender.row;	zcol = sender.col;	return TRUE;}-(BOOL)checkMoveCol:(MyButton*)sender zeroLoc:(NSRect)zero{	int x=0,i;	if(fabs(sender.row-zrow) < 2)return FALSE;	if(zrow > sender.row)	{		for(i=sender.row; i<zrow; i++)		{			x+=board[i][sender.col];		}	}	else 	{		for(i=sender.row; i>zrow; i--)		{			x+=board[i][sender.col];		}	}	if(x>6) return FALSE;	board[zrow][zcol] = x;	sender.currentValue = x;	[[sender animator] setFrame:zero];	zero = [sender frame];	board[sender.row][sender.col] = 0;	//colors[zrow][zcol] = colors[r][c];	zrow = sender.row;	zcol = sender.col;	return TRUE;}-(void)unMoveRow:(MyButton*)sender{	int x=0,i,zr,zc,br,bc;	[doList removeLastObject];	bc = [[doList lastObject]intValue];	[doList removeLastObject];	br = [[doList lastObject]intValue];	[doList removeLastObject];	zc = [[doList lastObject]intValue];	[doList removeLastObject];	zr = [[doList lastObject]intValue];	[doList removeLastObject];	if(zc > bc)	{		for(i=bc; i<=zc; i++)			x+=board[br][i];	}	else 	{		for(i=bc; i>=zc; i--)			x+=board[br][i];	}	board[zr][zc] = 0;	board[br][bc] = x;	//colors[br][bc] = colors[zr][zc];	[self getLocation];}-(void)unMoveCol:(MyButton*)sender{	int x=0,i,zr,zc,br,bc;	[doList removeLastObject];	bc = [[doList lastObject]intValue];	[doList removeLastObject];	br = [[doList lastObject]intValue];	[doList removeLastObject];	zc = [[doList lastObject]intValue];	[doList removeLastObject];	zr = [[doList lastObject]intValue];	[doList removeLastObject];	if(zr > br)	{		for(i=br; i<=zr; i++)			x+=board[i][bc];	}	else 	{		for(i=br; i>=zr; i--)			x+=board[i][bc];	}	board[zr][zc] = 0;	board[br][bc] = x;	//colors[br][bc] = colors[zr][zc];	[self getLocation];}-(BOOL)move:(MyButton*)sender zeroLoc:(NSRect)zero;{	if(fabs(zcol - sender.col) > 1 && sender.row == zrow)	{		if([self moveRow:sender zeroLoc:zero])		{			[doList addObject:[NSString stringWithString:@"row"]];			[self moveRow:sender zeroLoc:zero];			[self getLocation];			[self checkWin];			return YES;		}	}	else if(fabs(zrow - sender.row) > 1 && sender.col == zcol)	{		if([self moveCol:sender zeroLoc:zero])		{			[doList addObject:[NSString stringWithString:@"col"]];			[self moveCol:sender zeroLoc:zero];			[self getLocation];			[self checkWin];			return YES;		}	}	return NO;}-(int)undo:(NSArray*)buttons{	if([doList count] > 0)	{		if([[doList lastObject] isEqualToString:@"row"]) [self unMoveRow];		else if([[doList lastObject] isEqualToString:@"col"]) [self unMoveCol];		moves--;	}	return moves;}-(BOOL)checkWin{	BOOL test = TRUE;	int i,j;	for(i=0; i<dim; i++)	{		for(j=0; j<dim; j++)		{			if(i==dim-1 && j==dim-1)			{				if(board[i][j] != 0) test = FALSE;			}			else 			{				if(board[i][j] != 1) test = FALSE;			}		}	}	if(test)	{		[self setLevel:level+1];		[doList removeAllObjects];		[self shuffle];		return TRUE;	}	return FALSE;}-(void)resetButtons:(NSArray *)buttons{	for(int i=0; i< buttons.count; i++)		((MyButton*)[buttons objectAtIndex:i]).currentValue = 1;}@end